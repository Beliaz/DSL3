/**
 * generated by Xtext 2.13.0
 */
package uibk.ac.at.qe.dsl.game.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uibk.ac.at.qe.dsl.game.GamePackage;
import uibk.ac.at.qe.dsl.game.LevelDeclaration;
import uibk.ac.at.qe.dsl.game.LevelDefinition;
import uibk.ac.at.qe.dsl.game.LevelTransition;
import uibk.ac.at.qe.dsl.game.Scene;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Scene</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uibk.ac.at.qe.dsl.game.impl.SceneImpl#getDeclartions <em>Declartions</em>}</li>
 *   <li>{@link uibk.ac.at.qe.dsl.game.impl.SceneImpl#getDefinitions <em>Definitions</em>}</li>
 *   <li>{@link uibk.ac.at.qe.dsl.game.impl.SceneImpl#getStartLevel <em>Start Level</em>}</li>
 *   <li>{@link uibk.ac.at.qe.dsl.game.impl.SceneImpl#getFinalLevel <em>Final Level</em>}</li>
 *   <li>{@link uibk.ac.at.qe.dsl.game.impl.SceneImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SceneImpl extends MinimalEObjectImpl.Container implements Scene
{
  /**
   * The cached value of the '{@link #getDeclartions() <em>Declartions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclartions()
   * @generated
   * @ordered
   */
  protected EList<LevelDeclaration> declartions;

  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<LevelDefinition> definitions;

  /**
   * The cached value of the '{@link #getStartLevel() <em>Start Level</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartLevel()
   * @generated
   * @ordered
   */
  protected LevelDeclaration startLevel;

  /**
   * The cached value of the '{@link #getFinalLevel() <em>Final Level</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinalLevel()
   * @generated
   * @ordered
   */
  protected LevelDeclaration finalLevel;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected EList<LevelTransition> transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SceneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.SCENE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LevelDeclaration> getDeclartions()
  {
    if (declartions == null)
    {
      declartions = new EObjectContainmentEList<LevelDeclaration>(LevelDeclaration.class, this, GamePackage.SCENE__DECLARTIONS);
    }
    return declartions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LevelDefinition> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<LevelDefinition>(LevelDefinition.class, this, GamePackage.SCENE__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LevelDeclaration getStartLevel()
  {
    if (startLevel != null && startLevel.eIsProxy())
    {
      InternalEObject oldStartLevel = (InternalEObject)startLevel;
      startLevel = (LevelDeclaration)eResolveProxy(oldStartLevel);
      if (startLevel != oldStartLevel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.SCENE__START_LEVEL, oldStartLevel, startLevel));
      }
    }
    return startLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LevelDeclaration basicGetStartLevel()
  {
    return startLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStartLevel(LevelDeclaration newStartLevel)
  {
    LevelDeclaration oldStartLevel = startLevel;
    startLevel = newStartLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.SCENE__START_LEVEL, oldStartLevel, startLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LevelDeclaration getFinalLevel()
  {
    if (finalLevel != null && finalLevel.eIsProxy())
    {
      InternalEObject oldFinalLevel = (InternalEObject)finalLevel;
      finalLevel = (LevelDeclaration)eResolveProxy(oldFinalLevel);
      if (finalLevel != oldFinalLevel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.SCENE__FINAL_LEVEL, oldFinalLevel, finalLevel));
      }
    }
    return finalLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LevelDeclaration basicGetFinalLevel()
  {
    return finalLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFinalLevel(LevelDeclaration newFinalLevel)
  {
    LevelDeclaration oldFinalLevel = finalLevel;
    finalLevel = newFinalLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.SCENE__FINAL_LEVEL, oldFinalLevel, finalLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LevelTransition> getTransitions()
  {
    if (transitions == null)
    {
      transitions = new EObjectContainmentEList<LevelTransition>(LevelTransition.class, this, GamePackage.SCENE__TRANSITIONS);
    }
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.SCENE__DECLARTIONS:
        return ((InternalEList<?>)getDeclartions()).basicRemove(otherEnd, msgs);
      case GamePackage.SCENE__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
      case GamePackage.SCENE__TRANSITIONS:
        return ((InternalEList<?>)getTransitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.SCENE__DECLARTIONS:
        return getDeclartions();
      case GamePackage.SCENE__DEFINITIONS:
        return getDefinitions();
      case GamePackage.SCENE__START_LEVEL:
        if (resolve) return getStartLevel();
        return basicGetStartLevel();
      case GamePackage.SCENE__FINAL_LEVEL:
        if (resolve) return getFinalLevel();
        return basicGetFinalLevel();
      case GamePackage.SCENE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.SCENE__DECLARTIONS:
        getDeclartions().clear();
        getDeclartions().addAll((Collection<? extends LevelDeclaration>)newValue);
        return;
      case GamePackage.SCENE__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends LevelDefinition>)newValue);
        return;
      case GamePackage.SCENE__START_LEVEL:
        setStartLevel((LevelDeclaration)newValue);
        return;
      case GamePackage.SCENE__FINAL_LEVEL:
        setFinalLevel((LevelDeclaration)newValue);
        return;
      case GamePackage.SCENE__TRANSITIONS:
        getTransitions().clear();
        getTransitions().addAll((Collection<? extends LevelTransition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.SCENE__DECLARTIONS:
        getDeclartions().clear();
        return;
      case GamePackage.SCENE__DEFINITIONS:
        getDefinitions().clear();
        return;
      case GamePackage.SCENE__START_LEVEL:
        setStartLevel((LevelDeclaration)null);
        return;
      case GamePackage.SCENE__FINAL_LEVEL:
        setFinalLevel((LevelDeclaration)null);
        return;
      case GamePackage.SCENE__TRANSITIONS:
        getTransitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.SCENE__DECLARTIONS:
        return declartions != null && !declartions.isEmpty();
      case GamePackage.SCENE__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
      case GamePackage.SCENE__START_LEVEL:
        return startLevel != null;
      case GamePackage.SCENE__FINAL_LEVEL:
        return finalLevel != null;
      case GamePackage.SCENE__TRANSITIONS:
        return transitions != null && !transitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SceneImpl

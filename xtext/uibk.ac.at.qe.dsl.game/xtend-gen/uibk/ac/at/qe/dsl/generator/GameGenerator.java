/**
 * generated by Xtext 2.13.0
 */
package uibk.ac.at.qe.dsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import uibk.ac.at.qe.dsl.game.Action_O;
import uibk.ac.at.qe.dsl.game.Action_P;
import uibk.ac.at.qe.dsl.game.LevelDeclaration;
import uibk.ac.at.qe.dsl.game.LevelDefinition;
import uibk.ac.at.qe.dsl.game.My_Object;
import uibk.ac.at.qe.dsl.game.Person;
import uibk.ac.at.qe.dsl.game.Person_R;
import uibk.ac.at.qe.dsl.game.Scene;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GameGenerator extends AbstractGenerator {
  /**
   * Main generate function
   */
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Scene> _filter = Iterables.<Scene>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Scene.class);
    for (final Scene scene : _filter) {
      this.generateScene(resource, fsa, context, scene);
    }
  }
  
  /**
   * For each scene the level files are generated
   */
  public void generateScene(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final Scene scene) {
    EList<LevelDefinition> _definitions = scene.getDefinitions();
    for (final LevelDefinition definition : _definitions) {
      String _name = definition.getName().getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.generateFiles(resource, fsa, context, definition));
    }
  }
  
  /**
   * Creates a level by calling the necessary functions
   */
  public String generateFiles(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final LevelDefinition level) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.generated;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.company.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.PrintStream;");
    _builder.newLine();
    _builder.append("import java.util.LinkedList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.stream.Collectors;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Person> _persons = level.getPersons();
      for(final Person person : _persons) {
        {
          boolean _equals = person.getAction().equals(Action_P.TALK);
          if (_equals) {
            String _generateActionTalk = this.generateActionTalk(person, level);
            _builder.append(_generateActionTalk);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<My_Object> _objects = level.getObjects();
      for(final My_Object object : _objects) {
        {
          boolean _equals_1 = object.getAction().equals(Action_O.USE);
          if (_equals_1) {
            String _generateActionUse = this.generateActionUse(level, object);
            _builder.append(_generateActionUse);
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_2 = object.getAction().equals(Action_O.INSPECT);
            if (_equals_2) {
              String _generateActionInspect = this.generateActionInspect(level, object);
              _builder.append(_generateActionInspect);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.newLine();
    String _generateLevel = this.generateLevel(level);
    _builder.append(_generateLevel);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  /**
   * Talk to a person action
   */
  public String generateActionTalk(final Person person, final LevelDefinition level) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class TalkTo");
    String _name = person.getName();
    _builder.append(_name);
    _builder.append("Action implements IAction");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IPerson ");
    String _name_1 = person.getName();
    _builder.append(_name_1, "    ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      My_Object _finalObject = person.getFinalObject();
      boolean _tripleNotEquals = (_finalObject != null);
      if (_tripleNotEquals) {
        _builder.append("    ");
        _builder.append("private IObject ");
        String _name_2 = person.getFinalObject().getName();
        _builder.append(_name_2, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("int counter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean available;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("TalkTo");
    String _name_3 = person.getName();
    _builder.append(_name_3, "    ");
    _builder.append("Action(IPerson ");
    String _name_4 = person.getName();
    _builder.append(_name_4, "    ");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("this.");
    String _name_5 = person.getName();
    _builder.append(_name_5, "        ");
    _builder.append(" = ");
    String _name_6 = person.getName();
    _builder.append(_name_6, "        ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("this.counter = 0;");
    _builder.newLine();
    {
      My_Object _finalObject_1 = person.getFinalObject();
      boolean _tripleNotEquals_1 = (_finalObject_1 != null);
      if (_tripleNotEquals_1) {
        _builder.append("        ");
        _builder.append("this.");
        String _name_7 = person.getFinalObject().getName();
        _builder.append(_name_7, "        ");
        _builder.append(" = new Game_Object(\"");
        String _name_8 = person.getFinalObject().getName();
        _builder.append(_name_8, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return String.format(\"Talk to %s\", ");
    String _name_9 = person.getName();
    _builder.append(_name_9, "        ");
    _builder.append(".getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void perform(IContext context) {");
    _builder.newLine();
    {
      My_Object _finalObject_2 = person.getFinalObject();
      boolean _tripleNotEquals_2 = (_finalObject_2 != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t");
        _builder.append("if (context.player().hasObject(\"");
        String _name_10 = person.getFinalObject().getName();
        _builder.append(_name_10, "\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_11 = person.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(".say(context.getOut(), String.format(\"Congratulations!\"));");
        _builder.newLineIfNotEmpty();
        {
          LevelDeclaration _next = level.getNext();
          boolean _tripleEquals = (_next == null);
          if (_tripleEquals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("context.getState().setGameState(GameState.Finished);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("context.changeLevel();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("} else {");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("if (true) {");
        _builder.newLine();
      }
    }
    _builder.append("    \t\t");
    _builder.append("String name;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("switch (counter++) {");
    _builder.newLine();
    _builder.append("       \t\t");
    int i = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Person_R> _response = person.getResponse();
      for(final Person_R answer : _response) {
        _builder.append("       \t\t");
        _builder.append("case ");
        int _plusPlus = i++;
        _builder.append(_plusPlus, "       \t\t");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("       \t\t");
        _builder.append("\t");
        _builder.append("name = (String) context.getState().getData(Player.class.getName(), \"name\");");
        _builder.newLine();
        _builder.append("       \t\t");
        _builder.append("\t");
        String _name_12 = person.getName();
        _builder.append(_name_12, "       \t\t\t");
        _builder.append(".say(context.getOut(), String.format(\"");
        String _item = answer.getItem();
        _builder.append(_item, "       \t\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("       \t\t");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("       \t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("       \t\t\t");
    String _name_13 = person.getName();
    _builder.append(_name_13, "       \t\t\t");
    _builder.append(".say(context.getOut(), String.format(\"I have nothing to say!\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("       \t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isAvailable(IContext state) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isExplicitAction() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Leave action (go to next level)
   */
  public String generateActionLeave() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class LeaveAction implements IAction");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \"Leave\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void perform(IContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//context.player().say(context.getOut(), \"I gotta go, see you!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("context.getState().setGameState(GameState.Finished);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isAvailable(IContext state) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isExplicitAction() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Inspect action (user inspects an object and takes it)
   */
  public String generateActionInspect(final LevelDefinition level, final My_Object o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class InspectObject");
    String _name = o.getName();
    _builder.append(_name);
    _builder.append("Action implements IAction {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IObject obj;");
    _builder.newLine();
    {
      EList<My_Object> _objects = level.getObjects();
      for(final My_Object object : _objects) {
        {
          boolean _equals = object.getAction().equals(Action_O.INSPECT);
          if (_equals) {
            _builder.append("\t");
            _builder.append("private Game_Object ");
            String _name_1 = object.getName();
            _builder.append(_name_1, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("InspectObject");
    String _name_2 = o.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Action(IObject obj) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.obj = obj;");
    _builder.newLine();
    {
      EList<My_Object> _objects_1 = level.getObjects();
      for(final My_Object object_1 : _objects_1) {
        {
          boolean _equals_1 = object_1.getAction().equals(Action_O.INSPECT);
          if (_equals_1) {
            _builder.append("\t\t");
            _builder.append("this.");
            String _name_3 = object_1.getName();
            _builder.append(_name_3, "\t\t");
            _builder.append(" = new Game_Object(\"");
            String _name_4 = object_1.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"Take a look at the %s\", obj.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void perform(IContext context) {");
    _builder.newLine();
    {
      EList<My_Object> _objects_2 = level.getObjects();
      for(final My_Object object_2 : _objects_2) {
        {
          boolean _equals_2 = object_2.getAction().equals(Action_O.INSPECT);
          if (_equals_2) {
            _builder.append("\t\t");
            _builder.append("if (obj.equals(");
            String _name_5 = object_2.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append(")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("context.getOut().println(context.player().getName() + \": ");
            String _response = object_2.getResponse();
            _builder.append(_response, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("context.player().take(");
            String _name_6 = object_2.getName();
            _builder.append(_name_6, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.getOut().println(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("context.player().getName() + \": This is a nice \" + obj.getName() + \", but i can\'t use it!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAvailable(IContext state) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isExplicitAction() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Use action
   */
  public String generateActionUse(final LevelDefinition level, final My_Object o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class UseObject");
    String _name = o.getName();
    _builder.append(_name);
    _builder.append("Action implements IAction {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IObject obj;");
    _builder.newLine();
    {
      EList<My_Object> _objects = level.getObjects();
      for(final My_Object object : _objects) {
        {
          boolean _equals = object.getAction().equals(Action_O.USE);
          if (_equals) {
            _builder.append("\t");
            _builder.append("private Game_Object ");
            String _name_1 = object.getName();
            _builder.append(_name_1, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("UseObject");
    String _name_2 = o.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Action(IObject obj) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.obj = obj;");
    _builder.newLine();
    {
      EList<My_Object> _objects_1 = level.getObjects();
      for(final My_Object object_1 : _objects_1) {
        {
          boolean _equals_1 = object_1.getAction().equals(Action_O.USE);
          if (_equals_1) {
            _builder.append("\t\t");
            _builder.append("this.");
            String _name_3 = object_1.getName();
            _builder.append(_name_3, "\t\t");
            _builder.append(" = new Game_Object(\"");
            String _name_4 = object_1.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"Take a look at the %s\", obj.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void perform(IContext context) {");
    _builder.newLine();
    {
      EList<My_Object> _objects_2 = level.getObjects();
      for(final My_Object object_2 : _objects_2) {
        {
          boolean _equals_2 = object_2.getAction().equals(Action_O.USE);
          if (_equals_2) {
            _builder.append("\t\t");
            _builder.append("if (obj.equals(");
            String _name_5 = object_2.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append(")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("context.getOut().println(context.player().getName() + \": ");
            String _response = object_2.getResponse();
            _builder.append(_response, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.getOut().println(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("context.player().getName() + \": This is a nice \" + obj.getName() + \", but i can\'t use it!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAvailable(IContext state) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isExplicitAction() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Creates the main class for a level
   */
  public String generateLevel(final LevelDefinition level) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = level.getName().getName();
    _builder.append(_name);
    _builder.append(" extends TextAdventureLevel {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("private List<IAction> actions = new LinkedList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<IPerson> persons = new LinkedList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<IObject> objects = new LinkedList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void initialize(IContext context)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t");
    int i = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Person> _persons = level.getPersons();
      for(final Person person : _persons) {
        _builder.append("    \t");
        _builder.append("persons.add(new Person(\"");
        String _name_1 = person.getName();
        _builder.append(_name_1, "    \t");
        _builder.append("\", \"");
        String _position = person.getPosition();
        _builder.append(_position, "    \t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = person.getAction().equals(Action_P.TALK);
          if (_equals) {
            _builder.append("    \t");
            _builder.append("actions.add(new TalkTo");
            String _name_2 = person.getName();
            _builder.append(_name_2, "    \t");
            _builder.append("Action(persons.get(");
            int _plusPlus = i++;
            _builder.append(_plusPlus, "    \t");
            _builder.append(")));");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    String _xblockexpression = null;
    {
      i = 0;
      _xblockexpression = "";
    }
    _builder.append(_xblockexpression, "\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<My_Object> _objects = level.getObjects();
      for(final My_Object object : _objects) {
        _builder.append("\t\t");
        _builder.append("objects.add(new Game_Object(\"");
        String _name_3 = object.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = object.getAction().equals(Action_O.USE);
          if (_equals_1) {
            _builder.append("\t\t");
            _builder.append("actions.add(new UseObject");
            String _name_4 = object.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("Action(objects.get(");
            int _plusPlus_1 = i++;
            _builder.append(_plusPlus_1, "\t\t");
            _builder.append(")));");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_2 = object.getAction().equals(Action_O.INSPECT);
            if (_equals_2) {
              _builder.append("\t\t");
              _builder.append("actions.add(new InspectObject");
              String _name_5 = object.getName();
              _builder.append(_name_5, "\t\t");
              _builder.append("Action(objects.get(");
              int _plusPlus_2 = i++;
              _builder.append(_plusPlus_2, "\t\t");
              _builder.append(")));");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.initialize(context);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected String getDescription(IContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \"");
    String _name_6 = level.getDescription().getName();
    _builder.append(_name_6, "        ");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected List<IPerson> getPersons(IContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return persons;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected List<IAction> getActions(IContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return actions;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    {
      LevelDeclaration _next = level.getNext();
      boolean _tripleNotEquals = (_next != null);
      if (_tripleNotEquals) {
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("public String getNextLevel(IContext context) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("return ");
        String _name_7 = level.getNext().getName();
        _builder.append(_name_7, "            ");
        _builder.append(".class.getName();");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
